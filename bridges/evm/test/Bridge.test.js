const { expectRevert } = require("openzeppelin-test-helpers");
const Bridge = artifacts.require("BridgeMock");
const ReceiverMock = artifacts.require("ReceiverMock");

require("chai").should();

contract("Bridge", ([_, owner, alice, bob]) => {
  context("Checking oracle state relay (3 validators)", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner }
      );
    });
    it("should accept correct state relay (All signatures)", async () => {
      await this.bridge.relayOracleState(
        "63407", // _blockHeight,
        [
          "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMainStoresMerkleHash
          "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
          "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
          "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
          "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961" // stakingToUpgradeStoresMerkleHash
        ],
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
          "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
          "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
          "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137" // evidenceAndProposerHash
        ],
        "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
        [
          [
            "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
            "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
            27, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E" // signedDataSuffix
          ],
          [
            "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
            "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E" // signedDataSuffix
          ],
          [
            "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
            "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E" // signedDataSuffix
          ]
        ]
      );
    });

    it("should accept correct state relay (validator power is more than 2/3)", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 1]],
        { from: owner }
      );
      await this.bridge.relayOracleState(
        "63407", // _blockHeight,
        [
          "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMainStoresMerkleHash
          "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
          "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
          "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
          "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961" // stakingToUpgradeStoresMerkleHash
        ],
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
          "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
          "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
          "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137" // evidenceAndProposerHash
        ],
        "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
        [
          [
            "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
            "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E" // signedDataSuffix
          ],
          [
            "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
            "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E" // signedDataSuffix
          ],
          [
            "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
            "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E" // signedDataSuffix
          ]
        ]
      );
    });

    it("should revert if sum of validator powers is less than 2/3)", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 300]],
        { from: owner }
      );
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMainStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961" // stakingToUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137" // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E" // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E" // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E" // signedDataSuffix
            ],
          ]
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES"
      );
    });

    it("should not accept out-of-order signatures", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMainStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961" // stakingToUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137" // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E" // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E" // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E" // signedDataSuffix
            ]
          ]
        ),
        "INVALID_SIGNATURE_SIGNER_ORDER"
      );
    });

    it("should not accept invalid signature", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMainStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961" // stakingToUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137" // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
          ]
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES"
      );
    });
  });

  context("Checking data verification", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
        "46", // _blockHeight
        "0xC2650A3B2CEE22FECB5A7A4DB2B17A7698D0E1C6D03FCCB423AFA050C3ACE32D" // _oracleIAVLStateHash
      );
    });

    it("should not accept unrelayed block", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "9999", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "36", // subtreeVersion
              "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "7", // subtreeSize
              "36", // subtreeVersion
              "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "10", // subtreeSize
              "45", // subtreeVersion
              "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
            ],
          ]
        ),
        "NO_ORACLE_ROOT_STATE_DATA"
      );
    });

    // TODO: Make test work after implement
    // it("should accept correct data verification", async () => {
    //   (
    //     await this.bridge.verifyOracleData(
    //       "46", // _blockHeight
    //       "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
    //       "1", // _requestId
    //       "1", // _oracleScriptId
    //       "0x63616C6C64617461", // _params
    //       "36", // _version
    //       [
    //         [
    //           true, // isDataOnRight
    //           "1", // subtreeHeight
    //           "2", // subtreeSize
    //           "36", // subtreeVersion
    //           "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "2", // subtreeHeight
    //           "3", // subtreeSize
    //           "36", // subtreeVersion
    //           "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "3", // subtreeHeight
    //           "7", // subtreeSize
    //           "36", // subtreeVersion
    //           "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "4", // subtreeHeight
    //           "10", // subtreeSize
    //           "45", // subtreeVersion
    //           "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
    //         ],
    //       ]
    //     )
    //   )
    //     .toString()
    //     .should.eq(
    //       [1, 1582889446, 1582889459, 1, 1, 1, "0x63616c6c64617461", "0x6461746131"].toString()
    //     );
    // });

    it("should not accept invalid data verification", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "46", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000019999999999", // _data WRONG HERE
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "36", // subtreeVersion
              "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "7", // subtreeSize
              "36", // subtreeVersion
              "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "10", // subtreeSize
              "45", // subtreeVersion
              "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
            ],
          ]
        ),
        "INVALID_ORACLE_DATA_PROOF"
      );
    });

    it("should not accept incomplete proof", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "46", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
          ]
        ),
        "INVALID_ORACLE_DATA_PROOF"
      );
    });
  });

  context("Relay and Verfiy data", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    // TODO: Add test after implementation complete
    // it("should accept valid relay and verify", async () => {
    //   await this.receiver.relayAndSafe(
    //     "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000004E0000000000000000000000000000000000000000000000000000000000000043E1F8CCF68B355092FDF91B6B694EDBEBEE5DAD05E109C8160EB29462BDC995117937AE0536E33A2E7B9FCBFC0B28E25AE685532F5254C5203D70921A98AD6CB981060C95592D64D0536B79656A77EAC4F0EF4074A1FA634B03795B4FD60725F3B32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869ECF8F212876BC79E8A95B695D05623B66363130654BCEF439D8C901EADD2478587513FFE6590484CA8BE5DC089F44E8DF323449D5BE57F4918EC0C4B8C568B3B565269FCFB0CC5557E5ECC5EA493900F7FD48AA99A255D49B38BBB0D1697C8E526E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D7F4BE7E5A1EB872AD44103360DDC190410331280C42A54D829A5D752C796685D000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001C000000000000000000000000000000000000000000000000000000000000000106E0802113E0400000000000022480A20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000220C78CF546CFAA125473E81ADC773123FD6840D0F08DC52E8B9A829917E76444D348C64C8CCA117B0B2D751A1C20A9541F5372E3B2FAD2F53EC1FFC9E6B7167CE7000000000000000000000000000000000000000000000000000000000000001B0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A20CC19B175CCD7B0AD1C8CF7D9FB0FBEFD327FD09410E0E7926F11864DAD6D723710012A0C08A2C0BDF30510B1C482BA03320962616E64636861696E003CCD5BD8FE505ABDD8901A5C6F608AC91AAE266FB6254666D986C27E3D30E6857BF6E1637CE43E229D0E5322E8D55004D814FD23423E41F8392896D555875BDA000000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A20CC19B175CCD7B0AD1C8CF7D9FB0FBEFD327FD09410E0E7926F11864DAD6D723710012A0C08A2C0BDF30510BBFADABA03320962616E64636861696E003ECB129F7BCDDEF6A6CF9C02B443F1F564242B9DC2B9CD0959E6649BAC8564BF5A4CB8503A0FFECA3404F1F865C7D4AA49D3272AA3DF39AFE07A8660029FDACB000000000000000000000000000000000000000000000000000000000000001C0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003F12240A20CC19B175CCD7B0AD1C8CF7D9FB0FBEFD327FD09410E0E7926F11864DAD6D723710012A0C08A2C0BDF30510F6A7EEBA03320962616E64636861696E000000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000000000043E00000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000003A500000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000030000000005E6F5F15000000005E6F5F5500000000000000040000000000000004000000000000000400000000000029840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000003A5B970D52C0D68A1741BC481581C245B3CA04B0596B1A0C8A113583ECF7CAD5C2B00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000003A58F137C3F314784DAD9866E0AC08543A7D0A9CF924F9FD6D71F36C7337C534D1100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000003A54D40A32F8DEB619363E5010C1A4E19F6137F321313777C1334A262B9F044728500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000D00000000000000000000000000000000000000000000000000000000000003A557FE63EF72B1C2AF472E9F409FFC31540B13BD9553D736534DDC7F1041C36BCE00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000003A5580726819FA6A8CD409B12A6EBEC0FEC2754DDD3C6CAB874F10A684DB9C1117F00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002C000000000000000000000000000000000000000000000000000000000000043D34B30F702E922512108A2416D25CBF3639D2F82B338A2F76B3F47073CA7D20C6"
    //   );
    //   (await this.bridge.oracleStates(1086))
    //     .toString()
    //     .should.eq("0x1f8ccf68b355092fdf91b6b694edbebee5dad05e109c8160eb29462bdc995117");
    //   result = await this.receiver.latestResult();
    //   result[0].toString().should.eq("1");
    //   result[1].toString().should.eq("1584357141");
    //   result[2].toString().should.eq("1584357205");
    //   result[3].toString().should.eq("4");
    //   result[4].toString().should.eq("4");
    //   result[5].toString().should.eq("4");
    //   result[6].toString().should.eq("0x455448");
    //   result[7].toString().should.eq("0x0000000000002984");
    // });

    // it("should accept valid relay and verify case 2", async () => {
    //   await this.receiver.relayAndSafe(
    //     "0x
    //   );
    //   (await this.bridge.oracleStates(2162))
    //     .toString()
    //     .should.eq("0x3e71eb34c10e3df166273a80cb328bd9671e3b5039ba0ae5bfc0b4dcf7a67b19");
    //   result = await this.receiver.latestResult();
    //   result[0].toString().should.eq("1");
    //   result[1].toString().should.eq("1584357141");
    //   result[2].toString().should.eq("1584357203");
    //   result[3].toString().should.eq("4");
    //   result[4].toString().should.eq("1");
    //   result[5].toString().should.eq("2");
    //   result[6].toString().should.eq("0x425443");
    //   result[7].toString().should.eq("0x00000000000720eb");
    // });

    // it("should revert invalid relay and verify", async () => {
    //   await expectRevert(
    //     this.receiver.relayAndSafe(
    //       "0x
    //     ),
    //     "RELAY_ORACLE_STATE_FAILED."
    //   );
    // });
  });

  context("Update provider powers", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner }
      );
    });

    it("should revert if update validator power by non-onwer", async () => {
      await expectRevert(
        this.bridge.updateValidatorPowers([["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]], {
          from: alice,
        }),
        "Ownable: caller is not the owner."
      );
    });

    it("should update a validator power", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
        { from: owner }
      );

      (await this.bridge.validatorPowers("0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5"))
        .toString()
        .should.eq("150");

      (await this.bridge.totalValidatorPower()).toString().should.eq("450");
    });

    it("should update validator powers", async () => {
      await this.bridge.updateValidatorPowers(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 0],
          ["0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f", 200],
        ],
        { from: owner }
      );

      (await this.bridge.validatorPowers("0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5"))
        .toString()
        .should.eq("150");

      (await this.bridge.validatorPowers("0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE"))
        .toString()
        .should.eq("0");

      (await this.bridge.validatorPowers("0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f"))
        .toString()
        .should.eq("200");

      (await this.bridge.totalValidatorPower()).toString().should.eq("550");
    });
  });
});
