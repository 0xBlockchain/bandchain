const {expectRevert} = require('openzeppelin-test-helpers');
const Bridge = artifacts.require('BridgeMock');
const ReceiverMock = artifacts.require('ReceiverMock');

require('chai').should();

contract('Bridge', ([_, owner, alice, bob]) => {
  context('Checking oracle state relay (4 validators)', () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
          [
            ['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 100],
            ['0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE', 100],
            ['0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9', 100],
            ['0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260', 100],
          ],
          {from: owner},
      );
    });

    it('should accept correct state relay (validator power is more than 2/3)', async () => {
      await this.bridge.relayOracleState(
          '63407',  // _blockHeight,
          [
            '0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43',  // accToMemCapStoresMerkleHash
            '0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73',  // mintStoresMerkleHash
            '0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C',  // oracleIAVLStateHash
            '0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB',  // paramsAndSlashingStoresMerkleHash
            '0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961',  // stakingAndUpgradeStoresMerkleHash
          ],
          [
            '0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E',  // versionAndChainIdHash
            '0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC',  // timeHash
            '0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D',  // lastBlockIDAndOther
            '0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4',  // nextValidatorHashAndConsensusHash
            '0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D',  // lastResultsHash
            '0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137',  // evidenceAndProposerHash
          ],
          '0x6E080211AFF700000000000022480A20',  // _signedDataPrefix
          [
            [
              '0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C',  // r
              '0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1',  // s
              27,  // v
              '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E',  // signedDataSuffix
            ],
            [
              '0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44',  // r
              '0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC',  // s
              28,  // v
              '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E',  // signedDataSuffix
            ],
            [
              '0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140',  // r
              '0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC',  // s
              28,  // v
              '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E',  // signedDataSuffix
            ],
          ],
      );
    });

    it('should revert if sum of validator powers is less than 2/3)', async () => {
      await expectRevert(
          this.bridge.relayOracleState(
              '63407',  // _blockHeight,
              [
                '0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43',  // accToMemCapStoresMerkleHash
                '0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73',  // mintStoresMerkleHash
                '0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C',  // oracleIAVLStateHash
                '0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB',  // paramsAndSlashingStoresMerkleHash
                '0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961',  // stakingAndUpgradeStoresMerkleHash
              ],
              [
                '0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E',  // versionAndChainIdHash
                '0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC',  // timeHash
                '0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D',  // lastBlockIDAndOther
                '0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4',  // nextValidatorHashAndConsensusHash
                '0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D',  // lastResultsHash
                '0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137',  // evidenceAndProposerHash
              ],
              '0x6E080211AFF700000000000022480A20',  // _signedDataPrefix
              [
                [
                  '0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44',  // r
                  '0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E',  // signedDataSuffix
                ],
                [
                  '0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140',  // r
                  '0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E',  // signedDataSuffix
                ],
              ],
              ),
          'INSUFFICIENT_VALIDATOR_SIGNATURES',
      );
    });

    it('should not accept out-of-order signatures', async () => {
      await expectRevert(
          this.bridge.relayOracleState(
              '63407',  // _blockHeight,
              [
                '0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43',  // accToMemCapStoresMerkleHash
                '0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73',  // mintStoresMerkleHash
                '0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C',  // oracleIAVLStateHash
                '0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB',  // paramsAndSlashingStoresMerkleHash
                '0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961',  // stakingAndUpgradeStoresMerkleHash
              ],
              [
                '0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E',  // versionAndChainIdHash
                '0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC',  // timeHash
                '0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D',  // lastBlockIDAndOther
                '0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4',  // nextValidatorHashAndConsensusHash
                '0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D',  // lastResultsHash
                '0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137',  // evidenceAndProposerHash
              ],
              '0x6E080211AFF700000000000022480A20',  // _signedDataPrefix
              [
                [
                  '0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140',  // r
                  '0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E',  // signedDataSuffix
                ],
                [
                  '0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44',  // r
                  '0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E',  // signedDataSuffix
                ],
                [
                  '0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C',  // r
                  '0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1',  // s
                  27,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E',  // signedDataSuffix
                ],
              ],
              ),
          'INVALID_SIGNATURE_SIGNER_ORDER',
      );
    });

    it('should not accept invalid signature', async () => {
      await expectRevert(
          this.bridge.relayOracleState(
              '63407',  // _blockHeight,
              [
                '0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43',  // accToMemCapStoresMerkleHash
                '0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73',  // mintStoresMerkleHash
                '0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C',  // oracleIAVLStateHash
                '0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB',  // paramsAndSlashingStoresMerkleHash
                '0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961',  // stakingAndUpgradeStoresMerkleHash
              ],
              [
                '0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E',  // versionAndChainIdHash
                '0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC',  // timeHash
                '0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D',  // lastBlockIDAndOther
                '0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4',  // nextValidatorHashAndConsensusHash
                '0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D',  // lastResultsHash
                '0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137',  // evidenceAndProposerHash
              ],
              '0x6E080211AFF700000000000022480A20',  // _signedDataPrefix
              [
                [
                  // This sigature is wrong
                  '0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C',  // r
                  '0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E',  // signedDataSuffix
                ],
                [
                  '0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44',  // r
                  '0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E',  // signedDataSuffix
                ],
                [
                  '0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140',  // r
                  '0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC',  // s
                  28,  // v
                  '0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E',  // signedDataSuffix
                ],
              ],
              ),
          'INSUFFICIENT_VALIDATOR_SIGNATURES',
      );
    });
  });

  context('Checking data verification', () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
          '477',  // _blockHeight
          '0x496C18E8E9CFD6346EDDD073D296F9DE679323FB83460612062B1004ABA777AF',  // _oracleIAVLStateHash
      );
    });

    it('should not accept unrelayed block', async () => {
      await expectRevert(
          this.bridge.verifyOracleData(
              '9999',  // _blockHeight
              [
                'band test', 1, '0x030000004254436400000000000000', 4, 4
              ],  // _requestPacket
              [
                'band test', 1, 4, 1587734008, 1587734012, 1,
                '0xd8720b0000000000'
              ],      // _responsePacket
              '326',  // _version
              [
                [
                  true,     // isDataOnRight
                  '1',      // subtreeHeight
                  '2',      // subtreeSize
                  '54436',  // subtreeVersion
                  '0xA44982084B5CBAC2EC1DFD2DA6E5C315F88041EE5187AB09011DF15CB1E4AD4F',  // siblingHash
                ],
                [
                  true,     // isDataOnRight
                  '2',      // subtreeHeight
                  '4',      // subtreeSize
                  '71881',  // subtreeVersion
                  '0xA60467EDA72F9885397694062DCC799A1BBC62584B4DE87BE5812A3FC82FC867',  // siblingHash
                ],
                [
                  true,      // isDataOnRight
                  '3',       // subtreeHeight
                  '8',       // subtreeSize
                  '163458',  // subtreeVersion
                  '0x709E1C73511B24EFDD9B8D3CD717A5210BA20E2411A8529E8B642C54FB002DC4',  // siblingHash
                ],
                [
                  false,     // isDataOnRight
                  '4',       // subtreeHeight
                  '13',      // subtreeSize
                  '163458',  // subtreeVersion
                  '0x0BA6B3C6ACFAC5D66713F2B6963875489C4C8464E73DD2F953E188BEB3B9DD27',  // siblingHash
                ],
                [
                  true,      // isDataOnRight
                  '5',       // subtreeHeight
                  '18',      // subtreeSize
                  '178692',  // subtreeVersion
                  '0xB8AE896FF4B0D7E8290AB1008D860251DA91AFCDA5EAA0C44295A3217C884B8F',  // siblingHash
                ],
              ],
              ),
          'NO_ORACLE_ROOT_STATE_DATA',
      );
    });

    it('should accept correct data verification', async () => {
      const ret = await this.bridge.verifyOracleData(
          '477',  // _blockHeight
          [
            'beeb', 1, '0x030000004254436400000000000000', 1, 1
          ],  // _requestPacket
          [
            'beeb', 3, 1, 1589535020, 1589535022, 1, '0x4bb10e0000000000'
          ],      // _responsePacket
          '455',  // _version
          [
            [
              true,   // isDataOnRight
              '1',    // subtreeHeight
              '2',    // subtreeSize
              '455',  // subtreeVersion
              '0x2680D46657A14265D9131CB815018F6EA3C09EBBE915451FE5EBE5F48D4A03C5'  // siblingHash
            ],
            [
              true,   // isDataOnRight
              '2',    // subtreeHeight
              '3',    // subtreeSize
              '455',  // subtreeVersion
              '0xD83BBBA3EDE015CB5EC8825726CCC3B47A90113A47512634C6144ABDB3C9580F'  // siblingHash
            ],
            [
              true,   // isDataOnRight
              '3',    // subtreeHeight
              '5',    // subtreeSize
              '455',  // subtreeVersion
              '0xA9BAF0EB284F31BD6CE1A5850772EB694FC57E4FF98D43C8C2A7BE8E0042ABB7'  // siblingHash
            ],
            [
              true,   // isDataOnRight
              '4',    // subtreeHeight
              '9',    // subtreeSize
              '455',  // subtreeVersion
              '0xE368EBD1233B5E5F616E94E70C37240730A704BC57F6B7353D4F6BC2F7FB84F9'  // siblingHash
            ],
            [
              true,   // isDataOnRight
              '5',    // subtreeHeight
              '17',   // subtreeSize
              '455',  // subtreeVersion
              '0x11F8545EC7A18BACB1FDA550BB31BBACC1B56CE78369B738D75D129B91E73091'  // siblingHash
            ],
            [
              true,   // isDataOnRight
              '6',    // subtreeHeight
              '34',   // subtreeSize
              '476',  // subtreeVersion
              '0xC80B9D72E296B15A098D174B581B5B901BBC9FB287749179C255B6E2FEA07D07'  // siblingHash
            ]
          ],
      );
      ret[0].toString().should.eq(
          ['beeb', 1, '0x030000004254436400000000000000', 1, 1].toString(),
      );
      ret[1].toString().should.eq(
          [
            'beeb', 3, 1, 1589535020, 1589535022, 1, '0x4bb10e0000000000'
          ].toString(),
      );
    });

    it('should not accept invalid data verification', async () => {
      await expectRevert(
          this.bridge.verifyOracleData(
              '477',  // _blockHeight
              [
                'beeb', 1, '0x030000004254436400000000000000', 1, 1
              ],  // _requestPacket
              [
                'beeb', 3, 1, 1589535020, 1589535022, 1,
                '0x4bb10e0000000000'
              ],      // _responsePacket
              '455',  // _version
              [
                [
                  true,   // isDataOnRight
                  '1',    // subtreeHeight
                  '2',    // subtreeSize
                  '455',  // subtreeVersion
                  '0x2680D46657A14265D9131CB815018F6EA3C09EBBE915451FE5EBE5F48D4A03C5'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '2',    // subtreeHeight
                  '3',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xD83BBBA3EDE015CB5EC8825726CCC3B47A90113A47512634C6144ABDB3C9580F'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '3',    // subtreeHeight
                  '5',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xA9BAF0EB284F31BD6CE1A5850772EB694FC57E4FF98D43C8C2A7BE8E0042ABB7'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '4',    // subtreeHeight
                  '9',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xE368EBD1233B5E5F616E94E70C37240730A704BC57F6B7353D4F6BC2F7FB84F9'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '5',    // subtreeHeight
                  '17',   // subtreeSize
                  '455',  // subtreeVersion
                  '0x11F8545EC7A18BACB1FDA550BB31BBACC1B56CE78369B738D75D129B91E73091'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '6',    // subtreeHeight
                  '34',   // subtreeSize
                  '477',  // subtreeVersion
                  '0xC80B9D72E296B15A098D174B581B5B901BBC9FB287749179C255B6E2FEA07D07'  // siblingHash
                ]
              ],
              ),
          'INVALID_ORACLE_DATA_PROOF',
      );
    });

    it('should not accept incomplete proof', async () => {
      await expectRevert(
          this.bridge.verifyOracleData(
              '477',  // _blockHeight
              [
                'beeb', 1, '0x030000004254436400000000000000', 1, 1
              ],  // _requestPacket
              [
                'beeb', 3, 1, 1589535020, 1589535022, 1,
                '0x4bb10e0000000000'
              ],      // _responsePacket
              '455',  // _version
              [
                [
                  true,   // isDataOnRight
                  '1',    // subtreeHeight
                  '2',    // subtreeSize
                  '455',  // subtreeVersion
                  '0x2680D46657A14265D9131CB815018F6EA3C09EBBE915451FE5EBE5F48D4A03C5'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '2',    // subtreeHeight
                  '3',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xD83BBBA3EDE015CB5EC8825726CCC3B47A90113A47512634C6144ABDB3C9580F'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '3',    // subtreeHeight
                  '5',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xA9BAF0EB284F31BD6CE1A5850772EB694FC57E4FF98D43C8C2A7BE8E0042ABB7'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '4',    // subtreeHeight
                  '9',    // subtreeSize
                  '455',  // subtreeVersion
                  '0xE368EBD1233B5E5F616E94E70C37240730A704BC57F6B7353D4F6BC2F7FB84F9'  // siblingHash
                ],
                [
                  true,   // isDataOnRight
                  '5',    // subtreeHeight
                  '17',   // subtreeSize
                  '455',  // subtreeVersion
                  '0x11F8545EC7A18BACB1FDA550BB31BBACC1B56CE78369B738D75D129B91E73091'  // siblingHash
                ],
              ],
              ),
          'INVALID_ORACLE_DATA_PROOF',
      );
    });
  });

  context('Relay and Verfiy data', () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 100],
        ['0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE', 100],
        ['0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9', 100],
        ['0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260', 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    it('should accept valid relay and verify', async () => {
      await this.receiver.relayAndSafe(
          '0x
      );
      (await this.bridge.oracleStates(474))
          .toString()
          .should.eq(
              '0x4CE062B3FCBC1E025F53ABAD23917AF80D47B3D29C0113BF3BB7FC4ADD3F0ACB',
          );
      // ['beeb', 1, '0x030000004254436400000000000000', 1, 1],
      //     ['beeb', 3, 1, 1589535020, 1589535022, 1,
      //     '0x4bb10e0000000000'],
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq('beeb');
      req[1].toString().should.eq('1');
      req[2].toString().should.eq('0x030000004254436400000000000000');
      req[3].toString().should.eq('1');
      req[4].toString().should.eq('1');
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq('beeb');
      res[1].toString().should.eq('3');
      res[2].toString().should.eq('1');
      res[3].toString().should.eq('1589535020');
      res[4].toString().should.eq('1589535022');
      res[5].toString().should.eq('1');
      res[6].toString().should.eq('0x4bb10e0000000000');
    });

    it('should accept valid relay and verify case 2', async () => {
      await this.receiver.relayAndSafe(
          '0x
      );
      (await this.bridge.oracleStates(80754))
          .toString()
          .should.eq(
              '0x467D3E4CC7B217FF6DA51CACF2D3B3BB50B992A97E494C963787E8D206C2FE35',
          );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq('');
      req[1].toString().should.eq('1');
      req[2].toString().should.eq('0x030000004254436400000000000000');
      req[3].toString().should.eq('4');
      req[4].toString().should.eq('4');
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq('test2');
      res[1].toString().should.eq('2');
      res[2].toString().should.eq('4');
      res[3].toString().should.eq('1588678332');
      res[4].toString().should.eq('1588678336');
      res[5].toString().should.eq('1');
      res[6].toString().should.eq('c88c0d0000000000');
    });

    it('should revert invalid relay and verify', async () => {
      await expectRevert(
          this.receiver.relayAndSafe(
              '0x
              ),
          'RELAY_ORACLE_STATE_FAILED.',
      );

      await expectRevert(
          this.receiver.relayAndSafe(
              '0x
              ),
          'VERIFY_ORACLE_DATA_FAILED.',
      );
    });
  });

  context('Update provider powers', () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
          [
            ['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 100],
            ['0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE', 100],
            ['0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9', 100],
            ['0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260', 100],
          ],
          {from: owner},
      );
    });

    it('should revert if update validator power by non-onwer', async () => {
      await expectRevert(
          this.bridge.updateValidatorPowers(
              [['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 150]],
              {
                from: alice,
              },
              ),
          'Ownable: caller is not the owner.',
      );
    });

    it('should update a validator power', async () => {
      await this.bridge.updateValidatorPowers(
          [['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 150]],
          {from: owner},
      );

      (await this.bridge.validatorPowers(
           '0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5',
           ))
          .toString()
          .should.eq('150');

      (await this.bridge.totalValidatorPower()).toString().should.eq('450');
    });

    it('should update validator powers', async () => {
      await this.bridge.updateValidatorPowers(
          [
            ['0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5', 150],
            ['0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE', 0],
            ['0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f', 200],
          ],
          {from: owner},
      );

      (await this.bridge.validatorPowers(
           '0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5',
           ))
          .toString()
          .should.eq('150');

      (await this.bridge.validatorPowers(
           '0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE',
           ))
          .toString()
          .should.eq('0');

      (await this.bridge.validatorPowers(
           '0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f',
           ))
          .toString()
          .should.eq('200');

      (await this.bridge.totalValidatorPower()).toString().should.eq('550');
    });
  });
});
