package rpc

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func hexToBytes(hexstr string) []byte {
	b, err := hex.DecodeString(hexstr)
	if err != nil {
		panic(err)
	}
	return b
}
func TestEncodeRelay(t *testing.T) {
	block := BlockRelayProof{
		OracleIAVLStateHash:    hexToBytes("EF40EC64C91A7A1E16F2EE231CA912E4D21AD892E26B9332761087893C844E41"),
		OtherStoresMerkleHash:  hexToBytes("A5416CDC115C9600B5839FBF7A2E9062EAE7868816CC5A13179D956445744566"),
		SupplyStoresMerkleHash: hexToBytes("A893C850BAD7B5C1613A09D293A9B2D57216334798B3B202EABD99D048D9285C"),
		BlockHeaderMerkleParts: BlockHeaderMerkleParts{
			hexToBytes("32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E"),
			hexToBytes("286B1E7204D3262A2C91DABE116D664F4819C963F86194B751884F770F82D2B1"),
			hexToBytes("1946640B0572841F54DC04BC393DC109CC60458DDCD57381DA5B625886BEA780"),
			hexToBytes("DEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5"),
			hexToBytes("6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D"),
			hexToBytes("0CF1E6ECE60E49D19BB57C1A432E805F39BB4F65C366741E4F03FA54FBD90714"),
		},
		SignedDataPrefix: hexToBytes("6D080211190200000000000022480A20"),
		Signatures: []TMSignature{
			TMSignature{
				R:                hexToBytes("3CF528656033AD35362E1EFEC2D35AC4418B87F8B9EB5ADC9265F6D8773D354D"),
				S:                hexToBytes("49A254E4F33B44D34D56B67138CD9E91CD9C7EF99B4497D000CD4EA950F3243C"),
				V:                28,
				SignedDataSuffix: hexToBytes("12240A2066FEC271635C886F777CCD217D3EFA14693A587F1809725C77B2E1F15A56799410012A0B0891CB80F10510CDEE870B320962616E64636861696E"),
			},
			TMSignature{
				R:                hexToBytes("58D4A5415A0B0930C7BCBBFDA7703F664417A719E08D28E48C5484F8A59B4A9E"),
				S:                hexToBytes("2D196DC1F8325DCC4CDCB60B21775CA117E938EAAD73A4D6A3C3E93D5495EBCB"),
				V:                28,
				SignedDataSuffix: hexToBytes("12240A2066FEC271635C886F777CCD217D3EFA14693A587F1809725C77B2E1F15A56799410012A0B0891CB80F105108E8B8F13320962616E64636861696E"),
			},
			TMSignature{
				R:                hexToBytes("EE5353C407BDC46A3070934A5E54EC5BD5302A04A2C3D053105AFE311D788D85"),
				S:                hexToBytes("249B81BB5CBA5DB58A37E8464B962893AD8E0BB7D91509F229146B619B121C15"),
				V:                28,
				SignedDataSuffix: hexToBytes("12240A2066FEC271635C886F777CCD217D3EFA14693A587F1809725C77B2E1F15A56799410012A0B0891CB80F10510D6868C12320962616E64636861696E"),
			},
			TMSignature{
				R:                hexToBytes("A1F3864C4A011749FBACC5CE4C178811694147F62892C398503167B411347706"),
				S:                hexToBytes("3098EBFF5B5A04D2DF0AE3F89426BF97BA06FC4A98ECA69FF9DA5489BA5A747D"),
				V:                27,
				SignedDataSuffix: hexToBytes("12240A2066FEC271635C886F777CCD217D3EFA14693A587F1809725C77B2E1F15A56799410012A0B0891CB80F10510DF89EB07320962616E64636861696E"),
			},
		},
	}
	result, err := block.encodeToEthData(537)
	require.Nil(t, err)
	expect := hexToBytes("0000000000000000000000000000000000000000000000000000000000000219ef40ec64c91a7a1e16f2ee231ca912e4d21ad892e26b9332761087893c844e41a5416cdc115c9600b5839fbf7a2e9062eae7868816cc5a13179d956445744566a893c850bad7b5c1613a09d293a9b2d57216334798b3b202eabd99d048d9285c32fa694879095840619f5e49380612bd296ff7e950eafb66ff654d99ca70869e286b1e7204d3262a2c91dabe116d664f4819c963f86194b751884f770f82d2b11946640b0572841f54dc04bc393dc109cc60458ddcd57381da5b625886bea780def482cda986470c27374601ec716e9853de47d72828ae0131cf8ef98e2972c56e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d0cf1e6ece60e49d19bb57c1a432e805f39bb4f65c366741e4f03fa54fbd90714000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000106d080211190200000000000022480a2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003203cf528656033ad35362e1efec2d35ac4418b87f8b9eb5adc9265f6d8773d354d49a254e4f33b44d34d56b67138cd9e91cd9c7ef99b4497d000cd4ea950f3243c000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a2066fec271635c886f777ccd217d3efa14693a587f1809725c77b2e1f15a56799410012a0b0891cb80f10510cdee870b320962616e64636861696e000058d4a5415a0b0930c7bcbbfda7703f664417a719e08d28e48c5484f8a59b4a9e2d196dc1f8325dcc4cdcb60b21775ca117e938eaad73a4d6a3c3e93d5495ebcb000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a2066fec271635c886f777ccd217d3efa14693a587f1809725c77b2e1f15a56799410012a0b0891cb80f105108e8b8f13320962616e64636861696e0000ee5353c407bdc46a3070934a5e54ec5bd5302a04a2c3d053105afe311d788d85249b81bb5cba5db58a37e8464b962893ad8e0bb7d91509f229146b619b121c15000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a2066fec271635c886f777ccd217d3efa14693a587f1809725c77b2e1f15a56799410012a0b0891cb80f10510d6868c12320962616e64636861696e0000a1f3864c4a011749fbacc5ce4c178811694147f62892c398503167b4113477063098ebff5b5a04d2df0ae3f89426bf97ba06fc4a98eca69ff9da5489ba5a747d000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003e12240a2066fec271635c886f777ccd217d3efa14693a587f1809725c77b2e1f15a56799410012a0b0891cb80f10510df89eb07320962616e64636861696e0000")
	require.Equal(t, expect, result)
}

func TestEncodeVerify(t *testing.T) {
	data := OracleDataProof{
		Version:   uint64(12),
		RequestId: uint64(1),
		CodeHash:  hexToBytes("089A092741D2BBE10B1CFAA8E48D1512A51EF183E579AE29F89AF59DB3E72C85"),
		Params:    hexToBytes("0000000000000007626974636F696E0000000000000003425443"),
		Data:      hexToBytes("00000000000D341C"),
		MerklePaths: []IAVLMerklePath{
			IAVLMerklePath{
				IsDataOnRight:  false,
				SubtreeHeight:  1,
				SubtreeSize:    2,
				SubtreeVersion: 329,
				SiblingHash:    hexToBytes("50CE0FFAAD88CBEF253BB4B6D1614D6AE908C33E6423FA6D559E95E92F1BD9E3"),
			},
			IAVLMerklePath{
				IsDataOnRight:  false,
				SubtreeHeight:  2,
				SubtreeSize:    4,
				SubtreeVersion: 329,
				SiblingHash:    hexToBytes("8AF32134629090655F9EE7A4F82EB85EFDC9229810EE9BD079D058BEC97E644B"),
			},
			IAVLMerklePath{
				IsDataOnRight:  true,
				SubtreeHeight:  3,
				SubtreeSize:    6,
				SubtreeVersion: 329,
				SiblingHash:    hexToBytes("1FF0690F47B392AC4029EF340B3672671D3AC024AA079E61F2B22E59F7EB8513"),
			},
			IAVLMerklePath{
				IsDataOnRight:  true,
				SubtreeHeight:  4,
				SubtreeSize:    9,
				SubtreeVersion: 329,
				SiblingHash:    hexToBytes("E384620AA5ACE5DCCA502282C54A9164BC975D99F24E442C8CEEFCC44155F24C"),
			},
			IAVLMerklePath{
				IsDataOnRight:  true,
				SubtreeHeight:  5,
				SubtreeSize:    16,
				SubtreeVersion: 329,
				SiblingHash:    hexToBytes("099C775EF851BEECA8D9542B1853089E855D1773F79DB330B706C3B5F6765B68"),
			},
			IAVLMerklePath{
				IsDataOnRight:  true,
				SubtreeHeight:  6,
				SubtreeSize:    26,
				SubtreeVersion: 536,
				SiblingHash:    hexToBytes("1FFF55F78F46EC5301AD7BFCE5566950A75DC7BAC13E7D7B232888F9796CEFB2"),
			},
		},
	}

	result, err := data.encodeToEthData(537)
	require.Nil(t, err)
	expect := hexToBytes("000000000000000000000000000000000000000000000000000000000000021900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001089a092741d2bbe10b1cfaa8e48d1512a51ef183e579ae29f89af59db3e72c850000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000800000000000d341c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000007626974636f696e00000000000000034254430000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000014950ce0ffaad88cbef253bb4b6d1614d6ae908c33e6423fa6d559e95e92f1bd9e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001498af32134629090655f9ee7a4f82eb85efdc9229810ee9bd079d058bec97e644b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000001491ff0690f47b392ac4029ef340b3672671d3ac024aa079e61f2b22e59f7eb85130000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000149e384620aa5ace5dcca502282c54a9164bc975d99f24e442c8ceefcc44155f24c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000149099c775ef851beeca8d9542b1853089e855d1773f79db330b706c3b5f6765b6800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000002181fff55f78f46ec5301ad7bfce5566950a75dc7bac13e7d7b232888f9796cefb2")
	require.Equal(t, expect, result)
}
