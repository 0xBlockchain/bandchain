version: "3.7"

services:
  multi-validator1-node:
    build:
      context: chain
      dockerfile: Dockerfile
    image: band-validator:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.11
    command: sh -c "chmod +x ./docker-config/run.sh && ./docker-config/run.sh validator1"

  oracle1:
    image: band-validator:latest
    networks:
      bandchain:
    restart: always
    command: bandoracled2 r --node tcp://172.18.0.11:26657 --chain-id bandchain

  multi-validator2-node:
    image: band-validator:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.12
    command: sh -c "chmod +x ./docker-config/run.sh && ./docker-config/run.sh validator2"

  oracle2:
    image: band-validator:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      bandchain:
    restart: always
    command: bandoracled2 r --node tcp://172.18.0.12:26657 --chain-id bandchain

  multi-validator3-node:
    image: band-validator:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.13
    command: sh -c "chmod +x ./docker-config/run.sh && ./docker-config/run.sh validator3"

  oracle3:
    image: band-validator:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      bandchain:
    restart: always
    command: bandoracled2 r --node tcp://172.18.0.13:26657 --chain-id bandchain

  multi-validator4-node:
    image: band-validator:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.14
    command: sh -c "chmod +x ./docker-config/run.sh && ./docker-config/run.sh validator4"

  oracle4:
    image: band-validator:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      bandchain:
    restart: always
    command: bandoracled2 r --node tcp://172.18.0.14:26657 --chain-id bandchain

  query-node:
    image: band-validator:latest
    ports:
      - 26657:26657
    # volumes:
    #   - chain_config:/root/.bandd/config/
    networks:
      bandchain:
        ipv4_address: 172.18.0.15
    command: sh -c "sleep 20 && chmod +x ./docker-config/run.sh && ./docker-config/run.sh query-node"

  rest-server:
    image: band-validator:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.20
    restart: always
    ports:
      - 1317:1317
    command: bandcli rest-server --laddr tcp://0.0.0.0:1317 --node tcp://172.18.0.15:26657 --chain-id bandchain --trust-node

  proxy-server:
    build:
      context: scan/proxy
    image: proxy-server:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.99
    depends_on:
      - rest-server
    ports:
      - 80:80

  postgres:
    image: postgres:12
    restart: always
    networks:
      bandchain:
        ipv4_address: 172.18.0.88
    environment:
      POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    image: hasura/graphql-engine:v1.1.0
    ports:
      - "5433:5433"
    depends_on:
      - "postgres"
    restart: always
    networks:
      bandchain:
        ipv4_address: 172.18.0.89
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@172.18.0.88:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_SERVER_HOST: 0.0.0.0
      HASURA_GRAPHQL_SERVER_PORT: 5433

  faucet:
    image: band-validator:latest
    ports:
      - 5005:5005
    environment:
      - PORT=5005
      - NODE_URI=tcp://172.18.0.15:26657
    restart: always
    networks:
      bandchain:
        ipv4_address: 172.18.0.17
    command: sh -c "go run ./cmd/requestband/main.go"

networks:
  bandchain:
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/16"
